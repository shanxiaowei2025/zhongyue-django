# Generated by Django 5.1.1 on 2025-01-13 06:39

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nickname', models.CharField(blank=True, db_comment='用户昵称', default='', max_length=50, verbose_name='昵称')),
                ('avatar', models.URLField(blank=True, db_comment='用户头像URL', default='', verbose_name='头像URL')),
                ('phone', models.CharField(blank=True, db_comment='用户电话号码', default='', max_length=20, verbose_name='电话号码')),
                ('sex', models.IntegerField(choices=[(0, '男'), (1, '女')], db_comment='用户性别：0-男，1-女', default=0, verbose_name='性别')),
                ('status', models.IntegerField(choices=[(0, '禁用'), (1, '启用')], db_comment='用户状态：0-禁用，1-启用', default=1, verbose_name='状态')),
                ('dept_id', models.IntegerField(blank=True, db_comment='用户所属部门ID', default=None, null=True, verbose_name='部门ID')),
                ('remark', models.CharField(blank=True, db_comment='用户备注信息', default='', max_length=500, verbose_name='备注')),
                ('roles', models.JSONField(db_comment='用户角色列表，JSON格式', default=list, verbose_name='角色列表')),
                ('user_groups', models.JSONField(db_comment='用户组列表，JSON格式', default=list, verbose_name='用户组列表')),
                ('is_expense_auditor', models.BooleanField(default=False, verbose_name='是否为费用审核员')),
            ],
            options={
                'db_table': 'zy_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(db_comment='角色ID', primary_key=True, serialize=False, verbose_name='角色ID')),
                ('name', models.CharField(db_comment='角色名称', default='', max_length=50, unique=True, verbose_name='角色名称')),
                ('code', models.CharField(db_comment='角色唯一代码', default='', max_length=50, unique=True, verbose_name='角色代码')),
                ('status', models.IntegerField(choices=[(0, '禁用'), (1, '启用')], db_comment='角色状态：0-禁用，1-启用', default=1, verbose_name='状态')),
                ('remark', models.CharField(blank=True, db_comment='角色备注信息', default='', max_length=500, verbose_name='备注')),
                ('create_time', models.DateTimeField(auto_now_add=True, db_comment='角色创建时间', verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, db_comment='角色最后更新时间', verbose_name='更新时间')),
            ],
            options={
                'db_table': 'zy_role',
            },
        ),
        migrations.CreateModel(
            name='AsyncRoute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.CharField(db_comment='异步路由路径', default='', max_length=255, verbose_name='路由路径')),
                ('name', models.CharField(blank=True, db_comment='异步路由名称', default=None, max_length=255, null=True, verbose_name='路由名称')),
                ('component', models.CharField(blank=True, db_comment='异步路由对应的组件路径', default=None, max_length=255, null=True, verbose_name='组件路径')),
                ('redirect', models.CharField(blank=True, db_comment='异步路由重定向路径', default=None, max_length=255, null=True, verbose_name='重定向路径')),
                ('meta', models.JSONField(db_comment='异步路由元数据，JSON格式', default=dict, verbose_name='路由元数据')),
                ('parent', models.ForeignKey(blank=True, db_comment='父级异步路由ID', default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='users.asyncroute', verbose_name='父路由')),
            ],
            options={
                'db_table': 'zy_async_route',
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_comment='部门名称', default='', max_length=100, verbose_name='部门名称')),
                ('sort', models.IntegerField(db_comment='部门排序值', default=0, verbose_name='排序')),
                ('phone', models.CharField(blank=True, db_comment='部门联系电话', default='', max_length=20, verbose_name='联系电话')),
                ('principal', models.CharField(blank=True, db_comment='部门负责人', default='', max_length=100, verbose_name='负责人')),
                ('email', models.EmailField(blank=True, db_comment='部门联系邮箱', default='', max_length=254, verbose_name='邮箱')),
                ('status', models.IntegerField(choices=[(0, '禁用'), (1, '启用')], db_comment='部门状态：0-禁用，1-启用', default=1, verbose_name='状态')),
                ('type', models.IntegerField(choices=[(1, '公司'), (2, '分公司'), (3, '部门')], db_comment='部门类型：1-公司，2-分公司，3-部门', default=3, verbose_name='类型')),
                ('create_time', models.DateTimeField(auto_now_add=True, db_comment='部门创建时间', verbose_name='创建时间')),
                ('remark', models.TextField(blank=True, db_comment='部门备注信息', default='', verbose_name='备注')),
                ('parent', models.ForeignKey(blank=True, db_comment='父级部门ID', default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='users.department', verbose_name='父部门')),
            ],
            options={
                'db_table': 'zy_department',
                'ordering': ['sort', 'id'],
            },
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role_name', models.CharField(db_comment='角色名称', max_length=50, verbose_name='角色名称')),
                ('page_name', models.CharField(db_comment='权限所属的页面名称，如：合同管理', max_length=50, verbose_name='页面名称')),
                ('permission_name', models.CharField(db_comment='权限名称，如：contract_data_view_all', max_length=100, verbose_name='权限名称')),
                ('permission_value', models.BooleanField(db_comment='是否拥有该权限', default=False, verbose_name='权限值')),
                ('description', models.CharField(db_comment='权限的中文描述', max_length=200, verbose_name='权限描述')),
                ('role', models.ForeignKey(db_comment='关联的角色', on_delete=django.db.models.deletion.CASCADE, related_name='permissions', to='users.role', verbose_name='角色')),
            ],
            options={
                'db_table': 'zy_permission',
                'ordering': ['page_name', 'permission_name'],
                'unique_together': {('role', 'permission_name')},
            },
        ),
    ]
